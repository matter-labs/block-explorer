import { config } from "../support/config";

import type { Page } from "@playwright/test";

export interface AuthMockOptions {
  isAuthorized: boolean;
  userAddress?: string;
}

/**
 * Sets up API mocks for Prividium authentication flow
 */
export async function setupAuthMocks(page: Page, options: AuthMockOptions) {
  const { isAuthorized, userAddress = "0x1234567890123456789012345678901234567890" } = options;
  let isLoggedIn = false;

  // Mock the /auth/login endpoint (called from callback page)
  await page.route(
    (url) => url.pathname.endsWith("/auth/login"),
    async (route) => {
      console.log("Mocking /auth/login endpoint");
      if (isAuthorized) {
        isLoggedIn = true;
        await route.fulfill({
          status: 200,
          contentType: "application/json",
          body: JSON.stringify({ address: userAddress }),
        });
      } else {
        await route.fulfill({
          status: 403,
          body: "Forbidden",
        });
      }
    }
  );

  // Mock the /auth/me endpoint (called to check session)
  await page.route(
    (url) => url.pathname.endsWith("/auth/me"),
    async (route) => {
      if (isLoggedIn && isAuthorized) {
        await route.fulfill({
          status: 200,
          contentType: "application/json",
          body: JSON.stringify({ address: userAddress }),
        });
      } else {
        await route.fulfill({
          status: 401,
          body: "Unauthorized",
        });
      }
    }
  );

  // Mock the /auth/logout endpoint
  await page.route(
    (url) => url.pathname.endsWith("/auth/logout"),
    async (route) => {
      isLoggedIn = false;
      await route.fulfill({
        status: 204,
        body: "",
      });
    }
  );
}

/**
 * Intercepts OAuth redirect and simulates callback
 */
export async function setupOAuthRedirectMock(page: Page) {
  await page.route("", async (route) => {
    const url = route.request().url();

    // Check if this is the OAuth authorization redirect
    if (url.includes("authorize") && url.includes("client_id=block-explorer")) {
      // Extract the state parameter that was generated by the app
      const state = new URL(url).searchParams.get("state");
      if (!state) {
        throw new Error("No state parameter found in OAuth redirect URL");
      }

      // Navigate directly to callback with mock token instead of going to OAuth provider
      await page.goto(`${config.BASE_URL}/auth/callback#token=mock-jwt-token&state=${state}`);
    } else {
      // Continue with all other requests
      await route.fallback();
    }
  });
}
