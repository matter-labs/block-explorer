name: Create ZKsync OS Release

on:
  push:
    branches:
      - zksync-os

jobs:
  createReleaseVersion:
    name: Create ZKsync OS Release Version
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      releaseVersion: ${{ steps.release.outputs.releaseVersion }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
# TODO: Uncomment once lint errors are fixed
      # - name: Lint
      #   run: |
      #     npm run lint -- -- --no-fix --max-warnings 0
# TODO: Uncomment once tests are fixed
      # - name: Test
      #   run: |
      #     npm run test:ci

      - name: App type check
        working-directory: ./packages/app
        run: |
          npm run typecheck

      - name: Create Release Version
        id: release
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
            VITE_APP_ENVIRONMENT=production \
              npx semantic-release

  createDockerImages:
    name: Create Docker Images
    runs-on: [matterlabs-ci-runner]
    permissions:
      contents: read
    needs: createReleaseVersion
    if: ${{ github.ref == 'refs/heads/zksync-os' && needs.createReleaseVersion.outputs.releaseVersion != '' }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Auth to google artifact registry
        run: |
          gcloud auth configure-docker us-docker.pkg.dev -q 

      - name: Build and push Docker image for API
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: |
              "matterlabs/block-explorer-api:v${{ needs.createReleaseVersion.outputs.releaseVersion }}"
              "us-docker.pkg.dev/matterlabs-infra/matterlabs-docker/block-explorer-api:v${{ needs.createReleaseVersion.outputs.releaseVersion }}"
          file: packages/api/Dockerfile
          no-cache: true

      - name: Build and push Docker image for Worker
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: |
              "matterlabs/block-explorer-worker:v${{ needs.createReleaseVersion.outputs.releaseVersion }}"
              "us-docker.pkg.dev/matterlabs-infra/matterlabs-docker/block-explorer-worker:v${{ needs.createReleaseVersion.outputs.releaseVersion }}"
          file: packages/worker/Dockerfile
          no-cache: true

      - name: Build and push Docker image for Data Fetcher
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: |
              "matterlabs/block-explorer-data-fetcher:v${{ needs.createReleaseVersion.outputs.releaseVersion }}"
              "us-docker.pkg.dev/matterlabs-infra/matterlabs-docker/block-explorer-data-fetcher:v${{ needs.createReleaseVersion.outputs.releaseVersion }}"
          file: packages/data-fetcher/Dockerfile
          no-cache: true

      - name: Build and push Docker image for App
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: |
              "matterlabs/block-explorer-app:v${{ needs.createReleaseVersion.outputs.releaseVersion }}"
              "us-docker.pkg.dev/matterlabs-infra/matterlabs-docker/block-explorer-app:v${{ needs.createReleaseVersion.outputs.releaseVersion }}"
          file: packages/app/Dockerfile
          no-cache: true

  deployFrontendToStaging:
    name: Deploy Block Explorer frontend to zksync-os-stage
    runs-on: matterlabs-firebase-deployer
    permissions:
      contents: read
    needs: createReleaseVersion
    if: ${{ github.ref == 'refs/heads/zksync-os' && needs.createReleaseVersion.outputs.releaseVersion != '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Firebase CLI and auth
        run: |
          npm install -g firebase-tools

      - name: Download Dist package
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          version: "tags/v${{ needs.createReleaseVersion.outputs.releaseVersion }}"
          file: "dist.zip"
          target: "dist.zip"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Unzip Dist package
        run: |
          unzip dist.zip -d packages/app

      - name: Update config
        run: |
          echo "window[\"##runtimeConfig\"] = { appEnvironment: \"zksync-os-stage\", sentryDSN: \"${{ vars.SENTRY_DSN }}\"  };" > packages/app/dist/config.js

      - name: Download Storybook package
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          version: "tags/v${{ needs.createReleaseVersion.outputs.releaseVersion }}"
          file: "storybook-static.zip"
          target: "storybook-static.zip"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Unzip Storybook package
        run: |
          unzip storybook-static.zip -d packages/app

      - name: Check if Firebase Hosting channel exists
        working-directory: ./packages/app
        id: check_channel
        run: |
          CHANNEL_NAME="zksync-os-stage"
          CHANNEL_URL=$(firebase --project staging-scan-v2 hosting:channel:list --json | jq --arg channel_name "${CHANNEL_NAME}" -r '.result.channels[]|select(.name|contains($channel_name)) | .url')
          echo $CHANNEL_URL
          if [ -z "$CHANNEL_URL" ]; then
            echo "New channel"
            firebase --project staging-scan-v2 hosting:channel:create $CHANNEL_NAME
            CHANNEL_URL=$(firebase --project staging-scan-v2 hosting:channel:list --json | jq --arg channel_name "${CHANNEL_NAME}" -r '.result.channels[]|select(.name|contains($channel_name)) | .url')
          fi
          echo "channel_url=${CHANNEL_URL}" >> $GITHUB_OUTPUT

      - name: Deploy
        working-directory: ./packages/app
        run: |
          CHANNEL_NAME="zksync-os-stage"
          firebase --project staging-scan-v2 hosting:channel:deploy ${{ env.CHANNEL_NAME }}
